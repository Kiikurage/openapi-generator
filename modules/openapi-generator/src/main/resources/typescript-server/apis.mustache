// tslint:disable
{{>licenseInfo}}
import Router from '@koa/router';
import * as runtime from '../runtime';
{{#imports.0}}
import {
    {{#imports}}
    {{className}},
    {{/imports}}
} from '../models';
{{/imports.0}}

{{#operations}}
{{#operation}}
{{#allParams.0}}
export interface {{operationIdCamelCase}}Request {
    {{#allParams}}
    {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}};
    {{/allParams}}
}

{{/allParams.0}}
{{/operation}}
{{/operations}}
{{#operations}}
/**
 * {{#description}}{{{description}}}{{/description}}{{^description}}no description{{/description}}
 */
export interface {{baseName}}Controller {
    {{#operation}}

    /**
    {{#notes}}
    * {{&notes}}
    {{/notes}}
    {{#summary}}
    * {{&summary}}
    {{/summary}}
    */
    {{nickname}}({{#allParams.0}}requestParameters: {{operationIdCamelCase}}Request{{/allParams.0}}): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}>
    {{/operation}}
}
{{/operations}}
{{#operations}}

/**
 * {{#description}}{{{description}}}{{/description}}{{^description}}no description{{/description}}
 */
export function {{baseName}}Router(controller: {{baseName}}Controller) {
    const router = new Router();

    {{#operation}}
    /**
     {{#notes}}
     * {{&notes}}
     {{/notes}}
     {{#summary}}
     * {{&summary}}
     {{/summary}}
     */
    router.{{httpMethod}}('{{path}}', async (ctx) => {
        {{#hasParams}}
        const requestParameters: {{operationIdCamelCase}}Request = {
            {{#hasBodyParam}}
            body: ctx.request.body,
            {{/hasBodyParam}}
            {{#queryParams}}
            {{paramName}}: ctx.request.query['{{paramName}}'],
            {{/queryParams}}
            {{#pathParams}}
            {{paramName}}: ctx.params.{{baseName}},
            {{/pathParams}}
        };

        {{#allParams}}
        {{#required}}
        runtime.throwIfRequired(requestParameters, '{{paramName}}', '{{nickname}}');
        {{/required}}
        {{/allParams}}

        {{/hasParams}}
        ctx.body = await controller.{{nickname}}({{#hasParams}}requestParameters{{/hasParams}});
    });

    {{/operation}}
    return router;
}
{{/operations}}
{{#hasEnums}}

{{#operations}}
{{#operation}}
{{#allParams}}
{{#isEnum}}
/**
 * @export
 * @enum {string}
 */
export enum {{operationIdCamelCase}}{{enumName}} {
{{#allowableValues}}
    {{#enumVars}}
    {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
    {{/enumVars}}
{{/allowableValues}}
}
{{/isEnum}}
{{/allParams}}
{{/operation}}
{{/operations}}
{{/hasEnums}}
