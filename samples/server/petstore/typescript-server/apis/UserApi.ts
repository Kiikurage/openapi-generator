// tslint:disable
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import Router from 'koa-router';
import * as runtime from '../runtime';
import {
    User,
} from '../models';

export interface CreateUserRequest {
    body: User;
}

export interface CreateUsersWithArrayInputRequest {
    body: Array<User>;
}

export interface CreateUsersWithListInputRequest {
    body: Array<User>;
}

export interface DeleteUserRequest {
    username: string;
}

export interface GetUserByNameRequest {
    username: string;
}

export interface LoginUserRequest {
    username: string;
    password: string;
}

export interface UpdateUserRequest {
    username: string;
    body: User;
}

/**
 * no description
 */
export interface UserController {

    /**
    * This can only be done by the logged in user.
    * Create user
    */
    createUser(requestParameters: CreateUserRequest): Promise<void>

    /**
    * Creates list of users with given input array
    */
    createUsersWithArrayInput(requestParameters: CreateUsersWithArrayInputRequest): Promise<void>

    /**
    * Creates list of users with given input array
    */
    createUsersWithListInput(requestParameters: CreateUsersWithListInputRequest): Promise<void>

    /**
    * This can only be done by the logged in user.
    * Delete user
    */
    deleteUser(requestParameters: DeleteUserRequest): Promise<void>

    /**
    * Get user by user name
    */
    getUserByName(requestParameters: GetUserByNameRequest): Promise<User>

    /**
    * Logs user into the system
    */
    loginUser(requestParameters: LoginUserRequest): Promise<string>

    /**
    * Logs out current logged in user session
    */
    logoutUser(): Promise<void>

    /**
    * This can only be done by the logged in user.
    * Updated user
    */
    updateUser(requestParameters: UpdateUserRequest): Promise<void>
}

/**
 * no description
 */
export function UserRouter(controller: UserController) {
    const router = new Router();

    /**
     * This can only be done by the logged in user.
     * Create user
     */
    router.post('/user', async (ctx) => {
        const requestParameters: CreateUserRequest = ctx.request.body;

        runtime.throwIfRequired(requestParameters, 'body', 'createUser');

        ctx.body = await controller.createUser(requestParameters);
    });

    /**
     * Creates list of users with given input array
     */
    router.post('/user/createWithArray', async (ctx) => {
        const requestParameters: CreateUsersWithArrayInputRequest = ctx.request.body;

        runtime.throwIfRequired(requestParameters, 'body', 'createUsersWithArrayInput');

        ctx.body = await controller.createUsersWithArrayInput(requestParameters);
    });

    /**
     * Creates list of users with given input array
     */
    router.post('/user/createWithList', async (ctx) => {
        const requestParameters: CreateUsersWithListInputRequest = ctx.request.body;

        runtime.throwIfRequired(requestParameters, 'body', 'createUsersWithListInput');

        ctx.body = await controller.createUsersWithListInput(requestParameters);
    });

    /**
     * This can only be done by the logged in user.
     * Delete user
     */
    router.delete('/user/:username', async (ctx) => {
        const requestParameters: DeleteUserRequest = ctx.request.body;

        requestParameters.username = ctx.params.username;

        runtime.throwIfRequired(requestParameters, 'username', 'deleteUser');

        ctx.body = await controller.deleteUser(requestParameters);
    });

    /**
     * Get user by user name
     */
    router.get('/user/:username', async (ctx) => {
        const requestParameters: GetUserByNameRequest = ctx.request.body;

        requestParameters.username = ctx.params.username;

        runtime.throwIfRequired(requestParameters, 'username', 'getUserByName');

        ctx.body = await controller.getUserByName(requestParameters);
    });

    /**
     * Logs user into the system
     */
    router.get('/user/login', async (ctx) => {
        const requestParameters: LoginUserRequest = ctx.request.body;

        const queryParameters: runtime.HTTPQuery = ctx.request.query;
        if (queryParameters['username']) {
            requestParameters.username = queryParameters['username'] as any;
        }
        if (queryParameters['password']) {
            requestParameters.password = queryParameters['password'] as any;
        }

        runtime.throwIfRequired(requestParameters, 'username', 'loginUser');
        runtime.throwIfRequired(requestParameters, 'password', 'loginUser');

        ctx.body = await controller.loginUser(requestParameters);
    });

    /**
     * Logs out current logged in user session
     */
    router.get('/user/logout', async (ctx) => {
        ctx.body = await controller.logoutUser();
    });

    /**
     * This can only be done by the logged in user.
     * Updated user
     */
    router.put('/user/:username', async (ctx) => {
        const requestParameters: UpdateUserRequest = ctx.request.body;

        requestParameters.username = ctx.params.username;

        runtime.throwIfRequired(requestParameters, 'username', 'updateUser');
        runtime.throwIfRequired(requestParameters, 'body', 'updateUser');

        ctx.body = await controller.updateUser(requestParameters);
    });

    return router;
}
