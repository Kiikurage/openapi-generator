// tslint:disable
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import Router from 'koa-router';
import * as runtime from '../runtime';
import {
    ApiResponse,
    Pet,
} from '../models';

export interface AddPetRequest {
    body: Pet;
}

export interface DeletePetRequest {
    petId: number;
    apiKey?: string;
}

export interface FindPetsByStatusRequest {
    status: Array<FindPetsByStatusStatusEnum>;
}

export interface FindPetsByTagsRequest {
    tags: Array<string>;
}

export interface GetPetByIdRequest {
    petId: number;
}

export interface UpdatePetRequest {
    body: Pet;
}

export interface UpdatePetWithFormRequest {
    petId: number;
    name?: string;
    status?: string;
}

export interface UploadFileRequest {
    petId: number;
    additionalMetadata?: string;
    file?: Buffer;
}

/**
 * no description
 */
export interface PetController {

    /**
    * Add a new pet to the store
    */
    addPet(requestParameters: AddPetRequest): Promise<void>

    /**
    * Deletes a pet
    */
    deletePet(requestParameters: DeletePetRequest): Promise<void>

    /**
    * Multiple status values can be provided with comma separated strings
    * Finds Pets by status
    */
    findPetsByStatus(requestParameters: FindPetsByStatusRequest): Promise<Array<Pet>>

    /**
    * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
    * Finds Pets by tags
    */
    findPetsByTags(requestParameters: FindPetsByTagsRequest): Promise<Array<Pet>>

    /**
    * Returns a single pet
    * Find pet by ID
    */
    getPetById(requestParameters: GetPetByIdRequest): Promise<Pet>

    /**
    * Update an existing pet
    */
    updatePet(requestParameters: UpdatePetRequest): Promise<void>

    /**
    * Updates a pet in the store with form data
    */
    updatePetWithForm(requestParameters: UpdatePetWithFormRequest): Promise<void>

    /**
    * uploads an image
    */
    uploadFile(requestParameters: UploadFileRequest): Promise<ApiResponse>
}

/**
 * no description
 */
export function PetRouter(controller: PetController) {
    const router = new Router();

    /**
     * Add a new pet to the store
     */
    router.post('/pet', async (ctx) => {
        const requestParameters: AddPetRequest = ctx.request.body;

        runtime.throwIfRequired(requestParameters, 'body', 'addPet');

        ctx.body = await controller.addPet(requestParameters);
    });

    /**
     * Deletes a pet
     */
    router.delete('/pet/:petId', async (ctx) => {
        const requestParameters: DeletePetRequest = ctx.request.body;

        requestParameters.petId = ctx.params.petId;

        runtime.throwIfRequired(requestParameters, 'petId', 'deletePet');

        ctx.body = await controller.deletePet(requestParameters);
    });

    /**
     * Multiple status values can be provided with comma separated strings
     * Finds Pets by status
     */
    router.get('/pet/findByStatus', async (ctx) => {
        const requestParameters: FindPetsByStatusRequest = ctx.request.body;

        const queryParameters: runtime.HTTPQuery = ctx.request.query;
        if (queryParameters['status']) {
            requestParameters.status = queryParameters['status'] as any;
        }

        runtime.throwIfRequired(requestParameters, 'status', 'findPetsByStatus');

        ctx.body = await controller.findPetsByStatus(requestParameters);
    });

    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * Finds Pets by tags
     */
    router.get('/pet/findByTags', async (ctx) => {
        const requestParameters: FindPetsByTagsRequest = ctx.request.body;

        const queryParameters: runtime.HTTPQuery = ctx.request.query;
        if (queryParameters['tags']) {
            requestParameters.tags = queryParameters['tags'] as any;
        }

        runtime.throwIfRequired(requestParameters, 'tags', 'findPetsByTags');

        ctx.body = await controller.findPetsByTags(requestParameters);
    });

    /**
     * Returns a single pet
     * Find pet by ID
     */
    router.get('/pet/:petId', async (ctx) => {
        const requestParameters: GetPetByIdRequest = ctx.request.body;

        requestParameters.petId = ctx.params.petId;

        runtime.throwIfRequired(requestParameters, 'petId', 'getPetById');

        ctx.body = await controller.getPetById(requestParameters);
    });

    /**
     * Update an existing pet
     */
    router.put('/pet', async (ctx) => {
        const requestParameters: UpdatePetRequest = ctx.request.body;

        runtime.throwIfRequired(requestParameters, 'body', 'updatePet');

        ctx.body = await controller.updatePet(requestParameters);
    });

    /**
     * Updates a pet in the store with form data
     */
    router.post('/pet/:petId', async (ctx) => {
        const requestParameters: UpdatePetWithFormRequest = ctx.request.body;

        requestParameters.petId = ctx.params.petId;

        runtime.throwIfRequired(requestParameters, 'petId', 'updatePetWithForm');

        ctx.body = await controller.updatePetWithForm(requestParameters);
    });

    /**
     * uploads an image
     */
    router.post('/pet/:petId/uploadImage', async (ctx) => {
        const requestParameters: UploadFileRequest = ctx.request.body;

        requestParameters.petId = ctx.params.petId;

        runtime.throwIfRequired(requestParameters, 'petId', 'uploadFile');

        ctx.body = await controller.uploadFile(requestParameters);
    });

    return router;
}

/**
 * @export
 * @enum {string}
 */
export enum FindPetsByStatusStatusEnum {
    Available = 'available',
    Pending = 'pending',
    Sold = 'sold'
}
