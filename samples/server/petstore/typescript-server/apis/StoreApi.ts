// tslint:disable
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import Router from 'koa-router';
import * as runtime from '../runtime';
import {
    Order,
} from '../models';

export interface DeleteOrderRequest {
    orderId: string;
}

export interface GetOrderByIdRequest {
    orderId: number;
}

export interface PlaceOrderRequest {
    body: Order;
}

/**
 * no description
 */
export interface StoreController {

    /**
    * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
    * Delete purchase order by ID
    */
    deleteOrder(requestParameters: DeleteOrderRequest): Promise<void>

    /**
    * Returns a map of status codes to quantities
    * Returns pet inventories by status
    */
    getInventory(): Promise<{ [key: string]: number; }>

    /**
    * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
    * Find purchase order by ID
    */
    getOrderById(requestParameters: GetOrderByIdRequest): Promise<Order>

    /**
    * Place an order for a pet
    */
    placeOrder(requestParameters: PlaceOrderRequest): Promise<Order>
}

/**
 * no description
 */
export function StoreRouter(controller: StoreController) {
    const router = new Router();

    /**
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     * Delete purchase order by ID
     */
    router.delete('/store/order/:orderId', async (ctx) => {
        const requestParameters: DeleteOrderRequest = ctx.request.body;

        requestParameters.orderId = ctx.params.orderId;

        runtime.throwIfRequired(requestParameters, 'orderId', 'deleteOrder');

        ctx.body = await controller.deleteOrder(requestParameters);
    });

    /**
     * Returns a map of status codes to quantities
     * Returns pet inventories by status
     */
    router.get('/store/inventory', async (ctx) => {
        ctx.body = await controller.getInventory();
    });

    /**
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
     * Find purchase order by ID
     */
    router.get('/store/order/:orderId', async (ctx) => {
        const requestParameters: GetOrderByIdRequest = ctx.request.body;

        requestParameters.orderId = ctx.params.orderId;

        runtime.throwIfRequired(requestParameters, 'orderId', 'getOrderById');

        ctx.body = await controller.getOrderById(requestParameters);
    });

    /**
     * Place an order for a pet
     */
    router.post('/store/order', async (ctx) => {
        const requestParameters: PlaceOrderRequest = ctx.request.body;

        runtime.throwIfRequired(requestParameters, 'body', 'placeOrder');

        ctx.body = await controller.placeOrder(requestParameters);
    });

    return router;
}
